// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RaceTracker.Data;

namespace RaceTracker.Migrations
{
    [DbContext(typeof(RaceTrackerContext))]
    partial class RaceTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RaceTracker.Data.Models.Checkin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Confirmed");

                    b.Property<Guid>("MessageId");

                    b.Property<string>("Note");

                    b.Property<Guid>("ParticipantId");

                    b.Property<Guid?>("SegmentId");

                    b.Property<DateTime>("When");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SegmentId");

                    b.ToTable("Checkins");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Checkpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GeoJson");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("Checkpoints");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Leader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Checkins");

                    b.Property<double>("ElapsedTime");

                    b.Property<Guid?>("LastCheckinId");

                    b.Property<Guid>("ParticipantId");

                    b.Property<int>("Progress");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("LastCheckinId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Leaders");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<string>("From");

                    b.Property<string>("FromCity");

                    b.Property<string>("FromCountry");

                    b.Property<string>("FromState");

                    b.Property<string>("FromZip");

                    b.Property<DateTime>("Received");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Monitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("CheckpointId");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("CheckpointId");

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Age");

                    b.Property<string>("Bib");

                    b.Property<string>("City");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("LastName");

                    b.Property<Guid>("RaceId");

                    b.Property<string>("Region");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<decimal>("Distance");

                    b.Property<DateTime>("End");

                    b.Property<string>("Name");

                    b.Property<Guid>("RaceEventId");

                    b.Property<DateTime>("Start");

                    b.Property<string>("UltraSignupUrl");

                    b.Property<int>("Unit");

                    b.HasKey("Id");

                    b.HasIndex("RaceEventId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.RaceEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.ToTable("RaceEvents");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Segment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Distance");

                    b.Property<Guid?>("FromCheckpointId");

                    b.Property<string>("GeoJson");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<Guid>("RaceId");

                    b.Property<Guid?>("ToCheckpointId");

                    b.Property<double>("TotalDistance");

                    b.HasKey("Id");

                    b.HasIndex("FromCheckpointId");

                    b.HasIndex("RaceId");

                    b.HasIndex("ToCheckpointId");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Watcher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ParticipantId");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Watchers");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Checkin", b =>
                {
                    b.HasOne("RaceTracker.Data.Models.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RaceTracker.Data.Models.Participant", "Participant")
                        .WithMany("Checkins")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RaceTracker.Data.Models.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Leader", b =>
                {
                    b.HasOne("RaceTracker.Data.Models.Checkin", "LastCheckin")
                        .WithMany()
                        .HasForeignKey("LastCheckinId");

                    b.HasOne("RaceTracker.Data.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Monitor", b =>
                {
                    b.HasOne("RaceTracker.Data.Models.Checkpoint", "Checkpoint")
                        .WithMany("Monitors")
                        .HasForeignKey("CheckpointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Participant", b =>
                {
                    b.HasOne("RaceTracker.Data.Models.Race", "Race")
                        .WithMany("Participants")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Race", b =>
                {
                    b.HasOne("RaceTracker.Data.Models.RaceEvent", "RaceEvent")
                        .WithMany("Races")
                        .HasForeignKey("RaceEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Segment", b =>
                {
                    b.HasOne("RaceTracker.Data.Models.Checkpoint", "FromCheckpoint")
                        .WithMany()
                        .HasForeignKey("FromCheckpointId");

                    b.HasOne("RaceTracker.Data.Models.Race", "Race")
                        .WithMany("Segments")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RaceTracker.Data.Models.Checkpoint", "ToCheckpoint")
                        .WithMany()
                        .HasForeignKey("ToCheckpointId");
                });

            modelBuilder.Entity("RaceTracker.Data.Models.Watcher", b =>
                {
                    b.HasOne("RaceTracker.Data.Models.Participant", "Participant")
                        .WithMany("Watchers")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
